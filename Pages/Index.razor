@page "/"
@using System.Linq
@inject NavigationManager NavigationManager


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to the news recommendation system.

<SurveyPrompt Title="Choose the news categories you like and you will get news recommendations based on your choice" />


<AuthorizeView>
    <Authorized>
        <MudSelect T="string" MultiSelection="true" SelectAll="true" SelectAllText="Select all news" HelperText="@value" @bind-Value="value" @bind-SelectedValues="options" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="News" AdornmentIcon="@Icons.Material.Filled.Search">
    @foreach (var feline in news)
    {
        <MudSelectItem T="string" Value="@feline">@feline</MudSelectItem>
    }
</MudSelect>
<MudButton Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Primary">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
        <MudText Class="ms-2">Processing</MudText>
    }
    else
    {
        <MudText>show recommendations</MudText>
    }  


</MudButton>

<MudButton Variant="Variant.Filled" hidden="@uzbBtn" Color="Color.Dark" Href="/uzbekistannews">Uzbekistan news</MudButton>
<MudButton Variant="Variant.Filled" hidden="@belBtn" Color="Color.Dark" Href="/belarusnews">Belarus news</MudButton>
<MudButton Variant="Variant.Filled" hidden="@sportBtn" Color="Color.Dark" Href="/sportnews">Sport news</MudButton>
<MudButton Variant="Variant.Filled" hidden="@musicBtn" Color="Color.Dark" Href="/musicnews">Music news</MudButton>
<MudButton Variant="Variant.Filled" hidden="@movBtn" Color="Color.Dark" Href="/moviesnews">Movies news</MudButton>
<MudButton Variant="Variant.Filled" hidden="@gamesBtn" Color="Color.Dark" Href="/gamesnews">Games news</MudButton>
  
    </Authorized>
    <NotAuthorized>
        <h3>To work with the system, you need to <a href="https://localhost:7023/Identity/Account/Register">register</a> or <a href="https://localhost:7023/Identity/Account/Login">authorize</a></h3>
        
    </NotAuthorized>
</AuthorizeView>

@code {
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "Sport" };
    private bool _processing = false;
    private bool uzbBtn = true;
    private bool belBtn = true ;
    private bool sportBtn = true;
    private bool musicBtn = true;
    private bool movBtn = true;
    private bool gamesBtn = true;
    private List<string> Svalues{ get; set; }
    
    private bool carState;


    private string[] news =
    {
        "Uzbekistan", "Belarus", "Sport", "Music", "Movie", "Games"
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        Svalues = selectedValues;
        return $"{selectedValues.Count} news{(selectedValues.Count > 1 ? " have" : " has")} been selected";
    }


    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(800);
        _processing = false;
        
        if(Svalues.Contains("Uzbekistan"))
        {
            uzbBtn = false;
        }
        else
        {
            uzbBtn = true;
        }
        if(Svalues.Contains("Belarus"))
        {
            belBtn = false;
        }
        else
        {
            belBtn = true;
        }
        if(Svalues.Contains("Sport"))
        {
            sportBtn = false;
        }
        else
        {
            sportBtn = true;
        }
        if(Svalues.Contains("Music"))
        {
            musicBtn = false;
        }
        else
        {
            musicBtn = true;
        }
        if(Svalues.Contains("Movie"))
        {
            movBtn = false;
        }
        else
        {
            movBtn = true;
        }
        if(Svalues.Contains("Games"))
        {
            gamesBtn = false;
        }
        else
        {
            gamesBtn = true;
        }

        _processing = true;
        await Task.Delay(2000);
        _processing = false;
        
    }      
}
